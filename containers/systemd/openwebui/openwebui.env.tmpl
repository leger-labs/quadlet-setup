# Generated by Chezmoi - DO NOT EDIT MANUALLY
# Open WebUI Environment Configuration

# Core Settings
PORT={{ .ports.openwebui }}
WEBUI_URL={{ .urls.openwebui }}
WEBUI_NAME={{ .service_config.openwebui.name }}
ENV=prod
WEBUI_AUTH={{ .service_config.openwebui.auth }}
ENABLE_SIGNUP={{ .service_config.openwebui.enable_signup }}
DEFAULT_USER_ROLE={{ .service_config.openwebui.default_user_role }}
WEBUI_SECRET_KEY={{ .api_keys.openwebui_secret }}

# Database - uses service name from llm.network
DATABASE_URL=postgresql://{{ .database.openwebui_postgres_user }}:{{ .database.openwebui_postgres_password }}@openwebui-postgres:{{ .ports.postgres }}/openwebui

# Redis - uses service name from llm.network
REDIS_URL=redis://openwebui-redis:{{ .ports.redis }}/0

# LiteLLM - uses service name from llm.network
OPENAI_API_BASE_URL=http://litellm:{{ .ports.litellm }}/v1
OPENAI_API_KEY={{ .api_keys.litellm_master }}

# ============================================================================
# Document Processing / OCR
# ============================================================================
# Choose ONE extraction engine by uncommenting the appropriate section:
#
# Option 1: Mistral OCR (API-based, superior for complex layouts)
# - Requires MISTRAL_OCR_API_KEY in encrypted_private_secrets.yaml
# - Best for: tables, multi-column, scientific papers
# - Sign up: https://console.mistral.ai/
#
# Option 2: Docling (self-hosted container)
# - Uses local docling container (no API key needed)
# - Best for: privacy, offline operation
# ============================================================================

# OPTION 1: Mistral OCR (API-based) - ACTIVE
CONTENT_EXTRACTION_ENGINE=mistral_ocr
MISTRAL_OCR_API_KEY={{ .api_keys.mistral_ocr }}

# OPTION 2: Docling (self-hosted) - COMMENTED
# Uncomment below and comment out Mistral OCR section to switch to Docling
#CONTENT_EXTRACTION_ENGINE=docling
#DOCLING_SERVER_URL=http://docling:{{ .ports.docling }}

# ============================================================================
# Web Search
# ============================================================================
# Choose ONE search engine by uncommenting the appropriate section:
#
# Option 1: Tavily (API-based, LLM-optimized search)
# - Requires TAVILY_API_KEY in encrypted_private_secrets.yaml
# - Best for: RAG, 1000 free queries/month, fast results
# - Sign up: https://app.tavily.com/
#
# Option 2: SearXNG (self-hosted meta-search)
# - Uses local searxng container (no API key needed)
# - Best for: privacy, unlimited queries, self-hosted
# ============================================================================

# OPTION 1: Tavily (API-based) - ACTIVE
ENABLE_RAG_WEB_SEARCH=true
RAG_WEB_SEARCH_ENGINE=tavily
TAVILY_API_KEY={{ .api_keys.tavily }}

# Web Search Settings (applies to all search engines)
RAG_WEB_SEARCH_RESULT_COUNT=3
RAG_WEB_SEARCH_CONCURRENT_REQUESTS=10
ENABLE_SEARCH_QUERY=true

# Web Loader (for loading full page content)
RAG_WEB_LOADER_ENGINE=tavily_extract
TAVILY_EXTRACT_DEPTH=basic

# OPTION 2: SearXNG (self-hosted) - COMMENTED
# Uncomment below and comment out Tavily section to switch to SearXNG
#ENABLE_RAG_WEB_SEARCH=true
#RAG_WEB_SEARCH_ENGINE=searxng
#SEARXNG_QUERY_URL=http://searxng:{{ .ports.searxng }}/search?q=<query>
#RAG_WEB_SEARCH_RESULT_COUNT=3
#RAG_WEB_SEARCH_CONCURRENT_REQUESTS=10
#ENABLE_SEARCH_QUERY=true
# Note: For web loader with SearXNG, leave RAG_WEB_LOADER_ENGINE empty or set to "default"
#RAG_WEB_LOADER_ENGINE=

# Vector Database - Qdrant for RAG
VECTOR_DB=qdrant
QDRANT_URI=http://qdrant:{{ .ports.qdrant }}
QDRANT_API_KEY={{ .api_keys.qdrant }}

# Features
ENABLE_COMMUNITY_SHARING={{ .service_config.openwebui.enable_community_sharing }}
ENABLE_MESSAGE_RATING={{ .service_config.openwebui.enable_message_rating }}

# Code Interpreter - Jupyter Integration
ENABLE_CODE_INTERPRETER=true
CODE_INTERPRETER_URL=http://jupyter:{{ .ports.jupyter }}
CODE_INTERPRETER_API_URL=http://jupyter:{{ .ports.jupyter }}/api
